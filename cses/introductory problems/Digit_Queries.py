# 1-9 -> 9*1 = 9 -> 9
# 10-99 -> 90*2 = 180 -> 189
# 100-999 -> 900*3 = 2700 -> 2889
# 1000-9999 -> 9000*4 = 36000 -> 38889
# 10000-99999 -> 90000*5 = 450000 -> 488889
# 100000-999999 -> 900000*6 = 5400000 -> 5888889
# 1000000-9999999 -> 9000000*7 = 63000000 -> 68888889
# 10000000-99999999 -> 90000000*8 = 720000000 -> 788888889
# 100000000-999999999 -> 900000000*9 = 8100000000 -> 8888888889
# 1000000000-9999999999 -> 9000000000*10 = 90000000000 -> 98888888889
# 10000000000-99999999999 -> 90000000000*11 = 990000000000 -> 1088888888889
# 100000000000-999999999999 -> 900000000000*12 = 10800000000000 -> 11888888888889
# 1000000000000-9999999999999 -> 9000000000000*13 = 117000000000000 -> 128888888888889
# 10000000000000-99999999999999 -> 90000000000000*14 = 1260000000000000 -> 1388888888888889
# 100000000000000-999999999999999 -> 900000000000000*15 = 13500000000000000 -> 14888888888888889
# 1000000000000000-9999999999999999 -> 9000000000000000*16 = 144000000000000000 -> 158888888888888889


prefix,n,i,cnt=[],9,1,0
while n*i*10**(i-1)+cnt<=10**19:
    prefix.append(n*i*10**(i-1)+cnt)
    cnt=prefix[-1]
    i+=1
# print(prefix)
def find_ind(k):
    for i in range(len(prefix)):
        if k<=prefix[i]:
            return i
    return -1

for _ in range(int(input())):
    k=int(input())
    ind=find_ind(k)
    # print(ind)
    if not ind:
        print(k)
    else:
        l,r=10**ind,10**(ind+1)-1
        start=l
        digit=ind+1
        ans=""
        potential=[]
        while l<=r:
            mid=(l+r)//2
            posOfFirstDigit=(mid-start)*digit+1
            if posOfFirstDigit+prefix[ind-1]<k:
                potential=[mid,posOfFirstDigit+prefix[ind-1]]
                l=mid+1
            elif posOfFirstDigit+prefix[ind-1]>k:
                r=mid-1
            else:
                ans=str(mid)[0]
                break

        if ans!="": print(ans)
        else: 
            num=str(potential[0])
            print(num[k-potential[1]])